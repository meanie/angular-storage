{"version":3,"sources":["storage.service.js","engines/cookieStorage.service.js","engines/localStorage.service.js","engines/memoryStorage.service.js","engines/sessionStorage.service.js"],"names":["angular","prefix","substr","setEnabledStorageEngines","setDefaultStorageEngine","$get","getEngineService","engineService","fallback","$log","isFunction","getFallbackEngine","getPrefixedKey","key","isStringNumber","string","isStringObject","parseValue","value","charAt","formatValue","engineServices","engine","enabledStorageEngines","getEngineServiceName","$injector","has","defaultStorageEngine","StorageEngine","prototype","defaultValue","forEach","StorageEngines","Storage","warn","set","get","put","remove","$cookies","clear","prefixRegex","test","keys","window","k","Math","round","random","localStorage","setItem","$window","getItem","removeItem","memoryStore","sessionStorage"],"mappings":"iBAKAA,uVA6CE,OANEC,GAAO,MAAAA,EAAAC,QAAA,2BAMJC,gDAUL,oDAAKC,+CAQL,mCAAKC,2EAoBH,MAASC,IAAAA,EAAAA,wBASP,GAAIC,EAAAA,0BAMFA,EAAIC,EAAAA,IAAAA,sCAMJA,IAAAA,OAAWA,EACXC,EACEC,WAAAH,EAA0BI,oKAehC,OAASC,EAAeC,GAAKN,gBAO7B,OAASO,EAAAA,EAAeC,EAAQ,iFAchC,MAASC,UAAAA,GAAuB,SAARD,gBAOxB,MAA2B,MAAlBE,EAAAA,OAAWC,IAAO,MAAAH,EAAAI,OAAA,wBAcvBnB,EAAOA,YAAekB,IAAAA,OAAAA,8FAUjBE,oBAaLF,GAAI,OAAAA,GAAA,SAAAA,SACF,kDAQJ,MAAOA,mGAtHPG,SAsIuCC,IAAvCC,EAAkBC,QAAAA,GAClB,MAAKC,IAAAA,MAAUC,yBAAkBC,EAAA,sMAsBnCC,KAAAA,OAAcC,EAAgBP,uCAS5BJ,EAAAA,EAAmBA,eAOnBD,EAAUC,gGAiBA,IAAAY,IACRA,EAAOA,QAITjB,EAAID,EAAAC,IAEF,OAAIK,MAMJ,IAAAA,EAAOY,KAAAA,OAAAA,IAAAA,kFAgBTjB,EAAID,EAAAC,IAEF,OAAO,yIA2BXb,qBAMQ+B,QAAOC,EAAeV,SAAAA,8DAQvBW,EAAAA,GAAAA,IAAAA,EAAAA,sDCnVXjC,kEAYO,kBAAA,YAAA,OAAA,SAAAyB,EAAAhB,6DAOLA,EAAOyB,KAAA,0FAYLvB,QAAAA,gCAOAwB,MAAK,4BAOLC,EAAKC,IAAAxB,EAASA,oBAOdyB,OAAQC,EAAAH,IAAAvB,uBAOR2B,EAAOF,OAAAzB,8BASH4B,EAAeA,EAAAA,IAAYC,OAAKC,IAAU1C,GAAA,KACxCsC,EAASD,EAAOK,oEAOfC,EAAO5C,OAjFlB2C,EAAAE,iDCKA7C,2HAqBU,eAGFa,EAAO,MAAAiC,KAAAC,MAAA,IAAAD,KAAAE,mIAiBXb,MAAK,4BAOLC,EAAKa,aAAcC,QAAArC,EAAAK,oBAOnBoB,OAAQa,EAAAF,aAAcG,QAAAvC,uBAOtB2B,EAAOS,aAAShD,WAAQY,8BASlBsC,EAAQF,EAAaI,IAAAA,OAAWV,IAAKE,GAAAA,wEAOpCD,EAAO5C,aAnFlBqD,WAAAV,EAAAE,iDCKA7C,qIA2BIW,OAAAA,gCAOAwB,MAAK,sBAOLC,EAAKvB,GAASA,6CAUNyC,EAAAzC,6EAkBF4B,EAAOa,EAAYX,IAAKE,OAAAA,IAAAA,GAAAA,kEAOhB7C,EAjFlB2C,EAAAE,gDCKA7C,+HAqBU,eAGFa,EAAO,MAAAiC,KAAAC,MAAA,IAAAD,KAAAE,uIAiBXb,MAAK,4BAOLC,EAAKmB,eAAcL,QAAArC,EAAAK,oBAOnBoB,OAAQa,EAAAI,eAAcH,QAAAvC,uBAOtB2B,EAAOe,eAAStD,WAAQY,8BASlBsC,EAAQI,EAAeF,IAAAA,OAAWV,IAAKE,GAAAA,0EAOtCD,EAAO5C,eAnFlBqD,WAAAV,EAAAE","file":"angular-storage.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.Service', [\n  'Storage.MemoryStorage.Service',\n  'Storage.CookieStorage.Service',\n  'Storage.SessionStorage.Service',\n  'Storage.LocalStorage.Service',\n])\n\n/**\n * Provider definition\n */\n.provider('$storage', function $storageProvider() {\n\n  /**\n   * Global prefix\n   */\n  this.prefix = '';\n\n  /**\n   * Enabled storage engines\n   */\n  this.enabledStorageEngines = ['local', 'session', 'cookie', 'memory'];\n\n  /**\n   * Default storage engine\n   */\n  this.defaultStorageEngine = 'local';\n\n  /**\n   * Set prefix\n   */\n  this.setPrefix = function(prefix) {\n\n    //Append dot if there isn't one\n    if (prefix && prefix.substr(-1) !== '.') {\n      prefix += '.';\n    }\n\n    //Set prefix\n    this.prefix = prefix;\n    return this;\n  };\n\n  /**\n   * Set enabled storage engines\n   */\n  this.setEnabledStorageEngines = function(enabledStorageEngines) {\n    if (angular.isArray(enabledStorageEngines)) {\n      this.enabledStorageEngines = enabledStorageEngines;\n    }\n    return this;\n  };\n\n  /**\n   * Set default storage engine\n   */\n  this.setDefaultStorageEngine = function(defaultStorageEngine) {\n    this.defaultStorageEngine = defaultStorageEngine;\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = function($parse, $injector, $log) {\n\n    //Set configuration vars locally\n    let storagePrefix = this.prefix;\n    let enabledStorageEngines = this.enabledStorageEngines;\n    let defaultStorageEngine = this.defaultStorageEngine;\n\n    //Cached engine service instances\n    let engineServices = {};\n\n    /**\n     * Get storage engine service name\n     */\n    function getEngineServiceName(engine) {\n      return '$' + engine + 'Storage';\n    }\n\n    /**\n     * Get storage engine service instance\n     */\n    function getEngineService(engine) {\n\n      //Cached?\n      if (engineServices[engine]) {\n        return engineServices[engine];\n      }\n\n      //Get the engine service\n      let serviceName = getEngineServiceName(engine);\n      let engineService = $injector.get(serviceName);\n\n      //Not supported\n      if (engine !== 'memory' && !engineService.isSupported()) {\n\n        //Determine fallback\n        let fallback;\n        if (angular.isFunction(engineService.getFallbackEngine)) {\n          fallback = engineService.getFallbackEngine();\n        }\n\n        //Validate fallback and log warning\n        fallback = fallback || 'memory';\n        $log.warn(\n          'Storage engine', engine, 'not supported in this browser.',\n          'Using fallback engine', fallback, 'instead.'\n        );\n\n        //Get fallback engine\n        engineService = getEngineService(fallback);\n      }\n\n      //Cache and return the service\n      return (engineServices[engine] = engineService);\n    }\n\n    /**\n     * Get prefixed key\n     */\n    function getPrefixedKey(key) {\n      return key ? (storagePrefix + key) : '';\n    }\n\n    /**\n     * Test if string only contains numbers\n     */\n    function isStringNumber(string) {\n      return /^-?\\d+\\.?\\d*$/.test(string.replace(/[\"']/g, ''));\n    }\n\n    /**\n     * Test if string is a boolean\n     */\n    function isStringBoolean(string) {\n      return (string === 'false' || string === 'true');\n    }\n\n    /**\n     * Test if a string is an object/array\n     */\n    function isStringObject(string) {\n      return (string.charAt(0) === '{' || string.charAt(0) === '[');\n    }\n\n    /**\n     * Helper to parse a value for storage\n     */\n    function parseValue(value) {\n\n      //Normalize undefined values\n      if (angular.isUndefined(value) || value === null) {\n        return null;\n      }\n\n      //Convert to JSON if not a string\n      if (\n        angular.isObject(value) ||\n        angular.isArray(value) ||\n        typeof value === 'boolean' ||\n        angular.isNumber(Number(value) || value)\n      ) {\n        return angular.toJson(value);\n      }\n\n      //Use as is\n      return value;\n    }\n\n    /**\n     * Helper to format a value from storage\n     */\n    function formatValue(value) {\n\n      //Null values (also convert string null value)\n      if (!value || value === null || value === 'null') {\n        return null;\n      }\n\n      //Parse from JSON if needed\n      if (\n        isStringObject(value) ||\n        isStringBoolean(value) ||\n        isStringNumber(value)\n      ) {\n        try {\n          return angular.fromJson(value);\n        }\n        catch (e) {\n          return null;\n        }\n      }\n\n      //Return as is\n      return value;\n    }\n\n    /*****************************************************************************\n     * Initialization\n     ***/\n\n    //Make sure the default storage engine is enabled\n    if (enabledStorageEngines.indexOf(defaultStorageEngine) === -1) {\n      throw new Error(\n        'Default storage engine', defaultStorageEngine, 'is not enabled.'\n      );\n    }\n\n    //Validate enabled storage engines\n    angular.forEach(enabledStorageEngines, function(engine) {\n      let serviceName = getEngineServiceName(engine);\n      if (!$injector.has(serviceName)) {\n        throw new Error(\n          'Storage engine', engine, 'does not exist.',\n          'Make sure the service', serviceName, 'is included as a dependency.'\n        );\n      }\n    });\n\n    /*****************************************************************************\n     * Storage engine instances class\n     ***/\n\n    /**\n     * Storage engine instance constructor\n     */\n    let StorageEngine = function(engine) {\n      this.engine = getEngineService(engine);\n    };\n\n    /**\n     * Setter\n     */\n    StorageEngine.prototype.set = function(key, value) {\n\n      //Must have a key\n      key = getPrefixedKey(key);\n      if (!key) {\n        return false;\n      }\n\n      //Parse value\n      value = parseValue(value);\n\n      //Store value\n      try {\n        this.engine.set(key, value);\n        return true;\n      }\n      catch (e) {\n        return false;\n      }\n    };\n\n    /**\n     * Getter\n     */\n    StorageEngine.prototype.get = function(key, defaultValue) {\n\n      //Default value of default value is set to null (defaultvalueception!)\n      if (typeof defaultValue === 'undefined') {\n        defaultValue = null;\n      }\n\n      //Must have a key\n      key = getPrefixedKey(key);\n      if (!key) {\n        return defaultValue;\n      }\n\n      //Get value and return formatted\n      try {\n        let value = this.engine.get(key);\n        if (value === null) {\n          return defaultValue;\n        }\n        return formatValue(value);\n      }\n      catch (e) {\n        return defaultValue;\n      }\n    };\n\n    /**\n     * Remover\n     */\n    StorageEngine.prototype.remove = function(key) {\n\n      //Must have a key\n      key = getPrefixedKey(key);\n      if (!key) {\n        return false;\n      }\n\n      //Remove\n      try {\n        this.engine.remove(key);\n        return true;\n      }\n      catch (e) {\n        return false;\n      }\n    };\n\n    /**\n     * Clear, optionally prefixed\n     */\n    StorageEngine.prototype.clear = function(prefix) {\n      prefix = storagePrefix + (prefix || '');\n      this.engine.clear(prefix);\n    };\n\n    /*****************************************************************************\n     * Exposed storage service\n     ***/\n\n    //Create default storage engine service and initialize engines cache\n    let Storage = new StorageEngine(defaultStorageEngine);\n    let StorageEngines = {};\n\n    //Store ourselves in the cache as the default storage engine\n    StorageEngines[defaultStorageEngine] = Storage;\n\n    //Create dynamic properties for all enabled storage engines\n    angular.forEach(enabledStorageEngines, function(engine) {\n      Object.defineProperty(Storage, engine, {\n\n        /*jshint -W083 */\n        get: function() {\n          if (StorageEngines[engine]) {\n            return StorageEngines[engine];\n          }\n          return (StorageEngines[engine] = new StorageEngine(engine));\n        },\n      });\n    });\n\n    //Return\n    return Storage;\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.CookieStorage.Service', [])\n\n/**\n * Cookie storage engine service\n */\n.factory('$cookieStorage', function $cookieStorage($injector, $log) {\n\n  //Get cookies service\n  let $cookies;\n  if ($injector.has('$cookies')) {\n    $cookies = $injector.get('$cookies');\n  }\n  else {\n    $log.warn('Cookie storage requires the `ngCookies` module as a dependency');\n  }\n\n  /**\n   * Storage engine interface\n   */\n  return {\n\n    /**\n     * Check if supported\n     */\n    isSupported: function() {\n      return !!$cookies;\n    },\n\n    /**\n     * Get fallback engine\n     */\n    getFallbackEngine: function() {\n      return 'memory';\n    },\n\n    /**\n     * Set an item\n     */\n    set: function(key, value) {\n      $cookies.put(key, value);\n    },\n\n    /**\n     * Get an item\n     */\n    get: function(key) {\n      return $cookies.get(key);\n    },\n\n    /**\n     * Remove an item\n     */\n    remove: function(key) {\n      $cookies.remove(key);\n    },\n\n    /**\n     * Clear items\n     */\n    clear: function(prefix) {\n\n      //Get all the cookies and corresponding keys\n      let prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n      let cookies = $cookies.getAll();\n      let keys = cookies ? Object.keys(cookies) : [];\n\n      //Loop keys\n      for (let k = 0; k < keys.length; k++) {\n        if (!prefix || prefixRegex.test(keys[k])) {\n          $cookies.remove(keys[k]);\n        }\n      }\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.LocalStorage.Service', [])\n\n/**\n * Local storage engine service\n */\n.factory('$localStorage', function $localStorage($window) {\n\n  /**\n   * Storage engine interface\n   */\n  return {\n\n    /**\n     * Check if supported\n     */\n    isSupported: function() {\n\n      //Prepare test key\n      let key = '___' + Math.round(Math.random() * 1e7);\n\n      //Try local storage\n      try {\n        $window.localStorage.setItem(key, '');\n        $window.localStorage.removeItem(key);\n        return true;\n      }\n      catch (e) {\n        return false;\n      }\n    },\n\n    /**\n     * Get fallback engine\n     */\n    getFallbackEngine: function() {\n      return 'cookie';\n    },\n\n    /**\n     * Set an item\n     */\n    set: function(key, value) {\n      $window.localStorage.setItem(key, value);\n    },\n\n    /**\n     * Get an item\n     */\n    get: function(key) {\n      return $window.localStorage.getItem(key);\n    },\n\n    /**\n     * Remove an item\n     */\n    remove: function(key) {\n      $window.localStorage.removeItem(key);\n    },\n\n    /**\n     * Clear items\n     */\n    clear: function(prefix) {\n\n      //Get regex for prefix and keys\n      let prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n      let keys = Object.keys($window.localStorage);\n\n      //Loop keys\n      for (let k = 0; k < keys.length; k++) {\n        if (!prefix || prefixRegex.test(keys[k])) {\n          $window.localStorage.removeItem(keys[k]);\n        }\n      }\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.MemoryStorage.Service', [])\n\n/**\n * Memory storage engine service\n */\n.factory('$memoryStorage', function $memoryStorage() {\n\n  /**\n   * Store\n   */\n  let memoryStore = {};\n\n  /**\n   * Storage engine interface\n   */\n  return {\n\n    /**\n     * Always supported\n     */\n    isSupported: function() {\n      return true;\n    },\n\n    /**\n     * Get fallback engine\n     */\n    getFallbackEngine: function() {\n      return '';\n    },\n\n    /**\n     * Set an item\n     */\n    set: function(key, value) {\n      memoryStore[key] = value;\n    },\n\n    /**\n     * Get an item\n     */\n    get: function(key) {\n      if (typeof memoryStore[key] === 'undefined') {\n        return null;\n      }\n      return memoryStore[key];\n    },\n\n    /**\n     * Remove an item\n     */\n    remove: function(key) {\n      if (typeof memoryStore[key] !== 'undefined') {\n        delete memoryStore[key];\n      }\n    },\n\n    /**\n     * Clear items\n     */\n    clear: function(prefix) {\n\n      //Get regex for prefix and keys\n      let prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n      let keys = Object.keys(memoryStore);\n\n      //Loop keys\n      for (let k = 0; k < keys.length; k++) {\n        if (!prefix || prefixRegex.test(keys[k])) {\n          delete memoryStore[keys[k]];\n        }\n      }\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.SessionStorage.Service', [])\n\n/**\n * Session storage engine service\n */\n.factory('$sessionStorage', function $sessionStorage($window) {\n\n  /**\n   * Storage engine interface\n   */\n  return {\n\n    /**\n     * Check if supported\n     */\n    isSupported: function() {\n\n      //Prepare test key\n      let key = '___' + Math.round(Math.random() * 1e7);\n\n      //Try session storage\n      try {\n        $window.sessionStorage.setItem(key, '');\n        $window.sessionStorage.removeItem(key);\n        return true;\n      }\n      catch (e) {\n        return false;\n      }\n    },\n\n    /**\n     * Get fallback engine\n     */\n    getFallbackEngine: function() {\n      return 'memory';\n    },\n\n    /**\n     * Set an item\n     */\n    set: function(key, value) {\n      $window.sessionStorage.setItem(key, value);\n    },\n\n    /**\n     * Get an item\n     */\n    get: function(key) {\n      return $window.sessionStorage.getItem(key);\n    },\n\n    /**\n     * Remove an item\n     */\n    remove: function(key) {\n      $window.sessionStorage.removeItem(key);\n    },\n\n    /**\n     * Clear items\n     */\n    clear: function(prefix) {\n\n      //Get regex for prefix and keys\n      let prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n      let keys = Object.keys($window.sessionStorage);\n\n      //Loop keys\n      for (let k = 0; k < keys.length; k++) {\n        if (!prefix || prefixRegex.test(keys[k])) {\n          $window.sessionStorage.removeItem(keys[k]);\n        }\n      }\n    },\n  };\n});\n\n})(window, window.angular);\n"]}