{"version":3,"sources":["storage.service.js","engines/cookieStorage.service.js","engines/localStorage.service.js","engines/memoryStorage.service.js","engines/sessionStorage.service.js","meanie-angular-storage.min.js"],"names":["window","angular","undefined","module","provider","this","prefix","enabledStorageEngines","defaultStorageEngine","setPrefix","substr","setEnabledStorageEngines","isArray","setDefaultStorageEngine","$get","$parse","$injector","getEngineServiceName","engine","getEngineService","engineServices","serviceName","engineService","get","isSupported","fallback","isFunction","getFallbackEngine","console","warn","getPrefixedKey","key","storagePrefix","isStringNumber","string","test","replace","isStringObject","charAt","parseValue","value","isUndefined","isObject","isNumber","toJson","formatValue","fromJson","e","indexOf","Error","forEach","has","StorageEngine","prototype","set","defaultValue","remove","clear","Storage","StorageEngines","Object","defineProperty","factory","$cookies","put","prefixRegex","RegExp","cookies","getAll","keys","k","length","$window","Math","round","random","localStorage","setItem","removeItem","getItem","memoryStore","sessionStorage"],"mappings":"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","file":"meanie-angular-storage.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.Service', [\n  'Storage.MemoryStorage.Service',\n  'Storage.CookieStorage.Service',\n  'Storage.SessionStorage.Service',\n  'Storage.LocalStorage.Service'\n])\n\n/**\n * Provider definition\n */\n.provider('$storage', function $storageProvider() {\n\n  /**\n   * Global prefix\n   */\n  this.prefix = '';\n\n  /**\n   * Enabled storage engines\n   */\n  this.enabledStorageEngines = ['local', 'session', 'cookie', 'memory'];\n\n  /**\n   * Default storage engine\n   */\n  this.defaultStorageEngine = 'local';\n\n  /**\n   * Set prefix\n   */\n  this.setPrefix = function(prefix) {\n\n    //Append dot if there isn't one\n    if (prefix && prefix.substr(-1) !== '.') {\n      prefix += '.';\n    }\n\n    //Set prefix\n    this.prefix = prefix;\n    return this;\n  };\n\n  /**\n   * Set enabled storage engines\n   */\n  this.setEnabledStorageEngines = function(enabledStorageEngines) {\n    if (angular.isArray(enabledStorageEngines)) {\n      this.enabledStorageEngines = enabledStorageEngines;\n    }\n    return this;\n  };\n\n  /**\n   * Set default storage engine\n   */\n  this.setDefaultStorageEngine = function(defaultStorageEngine) {\n    this.defaultStorageEngine = defaultStorageEngine;\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$parse', '$injector', function($parse, $injector) {\n\n    //Set configuration vars locally\n    var storagePrefix = this.prefix;\n    var enabledStorageEngines = this.enabledStorageEngines;\n    var defaultStorageEngine = this.defaultStorageEngine;\n\n    //Cached engine service instances\n    var engineServices = {};\n\n    /**\n     * Get storage engine service name\n     */\n    function getEngineServiceName(engine) {\n      return '$' + engine + 'Storage';\n    }\n\n    /**\n     * Get storage engine service instance\n     */\n    function getEngineService(engine) {\n\n      //Cached?\n      if (engineServices[engine]) {\n        return engineServices[engine];\n      }\n\n      //Get the engine service\n      var serviceName = getEngineServiceName(engine);\n      var engineService = $injector.get(serviceName);\n\n      //Not supported\n      if (engine !== 'memory' && !engineService.isSupported()) {\n\n        //Determine fallback\n        var fallback;\n        if (angular.isFunction(engineService.getFallbackEngine)) {\n          fallback = engineService.getFallbackEngine();\n        }\n\n        //Validate fallback and log warning\n        fallback = fallback || 'memory';\n        console.warn(\n          'Storage engine', engine, 'not supported in this browser.',\n          'Using fallback engine', fallback, 'instead.'\n        );\n\n        //Get fallback engine\n        engineService = getEngineService(fallback);\n      }\n\n      //Cache and return the service\n      return (engineServices[engine] = engineService);\n    }\n\n    /**\n     * Get prefixed key\n     */\n    function getPrefixedKey(key) {\n      return key ? (storagePrefix + key) : '';\n    }\n\n    /**\n     * Test if string only contains numbers\n     */\n    function isStringNumber(string) {\n      return /^-?\\d+\\.?\\d*$/.test(string.replace(/[\"']/g, ''));\n    }\n\n    /**\n     * Test if a string is an object/array\n     */\n    function isStringObject(string) {\n      return (string.charAt(0) === '{' || string.charAt(0) === '[');\n    }\n\n    /**\n     * Helper to parse a value for storage\n     */\n    function parseValue(value) {\n\n      //Normalize undefined values\n      if (angular.isUndefined(value) || value === null) {\n        return null;\n      }\n\n      //Convert to JSON if not a string\n      if (angular.isObject(value) || angular.isArray(value) || angular.isNumber(+value || value)) {\n        return angular.toJson(value);\n      }\n\n      //Use as is\n      return value;\n    }\n\n    /**\n     * Helper to format a value from storage\n     */\n    function formatValue(value) {\n\n      //Null values (also convert string null value)\n      if (!value || value === null || value === 'null') {\n        return null;\n      }\n\n      //Parse from JSON if needed\n      if (isStringObject(value) || isStringNumber(value)) {\n        try {\n          return angular.fromJson(value);\n        }\n        catch (e) {\n          return null;\n        }\n      }\n\n      //Return as is\n      return value;\n    }\n\n    /*****************************************************************************\n     * Initialization\n     ***/\n\n    //Make sure the default storage engine is enabled\n    if (enabledStorageEngines.indexOf(defaultStorageEngine) === -1) {\n      throw new Error(\n        'Default storage engine', defaultStorageEngine, 'is not enabled.'\n      );\n    }\n\n    //Validate enabled storage engines\n    angular.forEach(enabledStorageEngines, function(engine) {\n      var serviceName = getEngineServiceName(engine);\n      if (!$injector.has(serviceName)) {\n        throw new Error(\n          'Storage engine', engine, 'does not exist.',\n          'Make sure the service', serviceName, 'is included as a dependency.'\n        );\n      }\n    });\n\n    /*****************************************************************************\n     * Storage engine instances class\n     ***/\n\n    /**\n     * Storage engine instance constructor\n     */\n    var StorageEngine = function(engine) {\n      this.engine = getEngineService(engine);\n    };\n\n    /**\n     * Setter\n     */\n    StorageEngine.prototype.set = function(key, value) {\n\n      //Must have a key\n      key = getPrefixedKey(key);\n      if (!key) {\n        return false;\n      }\n\n      //Parse value\n      value = parseValue(value);\n\n      //Store value\n      try {\n        this.engine.set(key, value);\n        return true;\n      }\n      catch (e) {\n        return false;\n      }\n    };\n\n    /**\n     * Getter\n     */\n    StorageEngine.prototype.get = function(key, defaultValue) {\n\n      //Default value of default value is set to null (defaultvalueception!)\n      if (typeof defaultValue === 'undefined') {\n        defaultValue = null;\n      }\n\n      //Must have a key\n      key = getPrefixedKey(key);\n      if (!key) {\n        return defaultValue;\n      }\n\n      //Get value and return formatted\n      try {\n        var value = this.engine.get(key);\n        if (value === null) {\n          return defaultValue;\n        }\n        return formatValue(value);\n      }\n      catch (e) {\n        return defaultValue;\n      }\n    };\n\n    /**\n     * Remover\n     */\n    StorageEngine.prototype.remove = function(key) {\n\n      //Must have a key\n      key = getPrefixedKey(key);\n      if (!key) {\n        return false;\n      }\n\n      //Remove\n      try {\n        this.engine.remove(key);\n        return true;\n      }\n      catch (e) {\n        return false;\n      }\n    };\n\n    /**\n     * Clear, optionally prefixed\n     */\n    StorageEngine.prototype.clear = function(prefix) {\n      prefix = storagePrefix + (prefix || '');\n      this.engine.clear(prefix);\n    };\n\n    /*****************************************************************************\n     * Exposed storage service\n     ***/\n\n    //Create default storage engine service and initialize engines cache\n    var Storage = new StorageEngine(defaultStorageEngine);\n    var StorageEngines = {};\n\n    //Store ourselves in the cache as the default storage engine\n    StorageEngines[defaultStorageEngine] = Storage;\n\n    //Create dynamic properties for all enabled storage engines\n    angular.forEach(enabledStorageEngines, function(engine) {\n      Object.defineProperty(Storage, engine, {\n\n        /*jshint -W083 */\n        get: function() {\n          if (StorageEngines[engine]) {\n            return StorageEngines[engine];\n          }\n          return (StorageEngines[engine] = new StorageEngine(engine));\n        }\n      });\n    });\n\n    //Return\n    return Storage;\n  }];\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.CookieStorage.Service', [])\n\n/**\n * Cookie storage engine service\n */\n.factory('$cookieStorage', ['$injector', function $cookieStorage($injector) {\n\n  //Get cookies service\n  var $cookies;\n  if ($injector.has('$cookies')) {\n    $cookies = $injector.get('$cookies');\n  }\n  else {\n    console.warn('Cookie storage requires the `ngCookies` module as a dependency.');\n  }\n\n  /**\n   * Storage engine interface\n   */\n  return {\n\n    /**\n     * Check if supported\n     */\n    isSupported: function() {\n      return !!$cookies;\n    },\n\n    /**\n     * Get fallback engine\n     */\n    getFallbackEngine: function() {\n      return 'memory';\n    },\n\n    /**\n     * Set an item\n     */\n    set: function(key, value) {\n      $cookies.put(key, value);\n    },\n\n    /**\n     * Get an item\n     */\n    get: function(key) {\n      return $cookies.get(key);\n    },\n\n    /**\n     * Remove an item\n     */\n    remove: function(key) {\n      $cookies.remove(key);\n    },\n\n    /**\n     * Clear items\n     */\n    clear: function(prefix) {\n\n      //Get all the cookies and corresponding keys\n      var prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n      var cookies = $cookies.getAll();\n      var keys = cookies ? Object.keys(cookies) : [];\n\n      //Loop keys\n      for (var k = 0; k < keys.length; k++) {\n        if (!prefix || prefixRegex.test(keys[k])) {\n          $cookies.remove(keys[k]);\n        }\n      }\n    }\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.LocalStorage.Service', [])\n\n/**\n * Local storage engine service\n */\n.factory('$localStorage', ['$window', function $localStorage($window) {\n\n  /**\n   * Storage engine interface\n   */\n  return {\n\n    /**\n     * Check if supported\n     */\n    isSupported: function() {\n\n      //Prepare test key\n      var key = '___' + Math.round(Math.random() * 1e7);\n\n      //Try local storage\n      try {\n        $window.localStorage.setItem(key, '');\n        $window.localStorage.removeItem(key);\n        return true;\n      }\n      catch (e) {\n        return false;\n      }\n    },\n\n    /**\n     * Get fallback engine\n     */\n    getFallbackEngine: function() {\n      return 'cookie';\n    },\n\n    /**\n     * Set an item\n     */\n    set: function(key, value) {\n      $window.localStorage.setItem(key, value);\n    },\n\n    /**\n     * Get an item\n     */\n    get: function(key) {\n      return $window.localStorage.getItem(key);\n    },\n\n    /**\n     * Remove an item\n     */\n    remove: function(key) {\n      $window.localStorage.removeItem(key);\n    },\n\n    /**\n     * Clear items\n     */\n    clear: function(prefix) {\n\n      //Get regex for prefix and keys\n      var prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n      var keys = Object.keys($window.localStorage);\n\n      //Loop keys\n      for (var k = 0; k < keys.length; k++) {\n        if (!prefix || prefixRegex.test(keys[k])) {\n          $window.localStorage.removeItem(keys[k]);\n        }\n      }\n    }\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.MemoryStorage.Service', [])\n\n/**\n * Memory storage engine service\n */\n.factory('$memoryStorage', function $memoryStorage() {\n\n  /**\n   * Store\n   */\n  var memoryStore = {};\n\n  /**\n   * Storage engine interface\n   */\n  return {\n\n    /**\n     * Always supported\n     */\n    isSupported: function() {\n      return true;\n    },\n\n    /**\n     * Get fallback engine\n     */\n    getFallbackEngine: function() {\n      return '';\n    },\n\n    /**\n     * Set an item\n     */\n    set: function(key, value) {\n      memoryStore[key] = value;\n    },\n\n    /**\n     * Get an item\n     */\n    get: function(key) {\n      if (typeof memoryStore[key] === 'undefined') {\n        return null;\n      }\n      return memoryStore[key];\n    },\n\n    /**\n     * Remove an item\n     */\n    remove: function(key) {\n      if (typeof memoryStore[key] !== 'undefined') {\n        delete memoryStore[key];\n      }\n    },\n\n    /**\n     * Clear items\n     */\n    clear: function(prefix) {\n\n      //Get regex for prefix and keys\n      var prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n      var keys = Object.keys(memoryStore);\n\n      //Loop keys\n      for (var k = 0; k < keys.length; k++) {\n        if (!prefix || prefixRegex.test(keys[k])) {\n          delete memoryStore[keys[k]];\n        }\n      }\n    }\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.SessionStorage.Service', [])\n\n/**\n * Session storage engine service\n */\n.factory('$sessionStorage', ['$window', function $sessionStorage($window) {\n\n  /**\n   * Storage engine interface\n   */\n  return {\n\n    /**\n     * Check if supported\n     */\n    isSupported: function() {\n\n      //Prepare test key\n      var key = '___' + Math.round(Math.random() * 1e7);\n\n      //Try session storage\n      try {\n        $window.sessionStorage.setItem(key, '');\n        $window.sessionStorage.removeItem(key);\n        return true;\n      }\n      catch (e) {\n        return false;\n      }\n    },\n\n    /**\n     * Get fallback engine\n     */\n    getFallbackEngine: function() {\n      return 'memory';\n    },\n\n    /**\n     * Set an item\n     */\n    set: function(key, value) {\n      $window.sessionStorage.setItem(key, value);\n    },\n\n    /**\n     * Get an item\n     */\n    get: function(key) {\n      return $window.sessionStorage.getItem(key);\n    },\n\n    /**\n     * Remove an item\n     */\n    remove: function(key) {\n      $window.sessionStorage.removeItem(key);\n    },\n\n    /**\n     * Clear items\n     */\n    clear: function(prefix) {\n\n      //Get regex for prefix and keys\n      var prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n      var keys = Object.keys($window.sessionStorage);\n\n      //Loop keys\n      for (var k = 0; k < keys.length; k++) {\n        if (!prefix || prefixRegex.test(keys[k])) {\n          $window.sessionStorage.removeItem(keys[k]);\n        }\n      }\n    }\n  };\n}]);\n\n})(window, window.angular);\n",null],"sourceRoot":"/source/"}