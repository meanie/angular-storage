{"version":3,"sources":["meanie-angular-storage.min.js","storage.service.js","engines/cookieStorage.service.js","engines/localStorage.service.js","engines/memoryStorage.service.js","engines/sessionStorage.service.js"],"names":["window","angular","undefined","module","provider","this","prefix","enabledStorageEngines","defaultStorageEngine","setPrefix","substr","setEnabledStorageEngines","isArray","setDefaultStorageEngine","$get","$parse","$injector","$log","getEngineServiceName","engine","getEngineService","engineServices","serviceName","engineService","get","isSupported","fallback","isFunction","getFallbackEngine","warn","getPrefixedKey","key","storagePrefix","isStringNumber","string","test","replace","isStringBoolean","isStringObject","charAt","parseValue","value","isUndefined","isObject","isNumber","Number","toJson","formatValue","fromJson","e","indexOf","Error","forEach","has","StorageEngine","prototype","set","defaultValue","remove","clear","Storage","StorageEngines","Object","defineProperty","factory","$cookies","put","prefixRegex","RegExp","cookies","getAll","keys","k","length","$window","Math","round","random","localStorage","setItem","removeItem","getItem","memoryStore","sessionStorage"],"mappings":"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","file":"meanie-angular-storage.min.js","sourcesContent":["/**\n * meanie-angular-storage * https://github.com/meanie/angular-storage\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Storage.Service', ['Storage.MemoryStorage.Service', 'Storage.CookieStorage.Service', 'Storage.SessionStorage.Service', 'Storage.LocalStorage.Service'])\n\n  /**\n   * Provider definition\n   */\n  .provider('$storage', function $storageProvider() {\n\n    /**\n     * Global prefix\n     */\n    this.prefix = '';\n\n    /**\n     * Enabled storage engines\n     */\n    this.enabledStorageEngines = ['local', 'session', 'cookie', 'memory'];\n\n    /**\n     * Default storage engine\n     */\n    this.defaultStorageEngine = 'local';\n\n    /**\n     * Set prefix\n     */\n    this.setPrefix = function (prefix) {\n\n      //Append dot if there isn't one\n      if (prefix && prefix.substr(-1) !== '.') {\n        prefix += '.';\n      }\n\n      //Set prefix\n      this.prefix = prefix;\n      return this;\n    };\n\n    /**\n     * Set enabled storage engines\n     */\n    this.setEnabledStorageEngines = function (enabledStorageEngines) {\n      if (angular.isArray(enabledStorageEngines)) {\n        this.enabledStorageEngines = enabledStorageEngines;\n      }\n      return this;\n    };\n\n    /**\n     * Set default storage engine\n     */\n    this.setDefaultStorageEngine = function (defaultStorageEngine) {\n      this.defaultStorageEngine = defaultStorageEngine;\n      return this;\n    };\n\n    /**\n     * Service getter\n     */\n    this.$get = ['$parse', '$injector', '$log', function ($parse, $injector, $log) {\n\n      //Set configuration vars locally\n      var storagePrefix = this.prefix;\n      var enabledStorageEngines = this.enabledStorageEngines;\n      var defaultStorageEngine = this.defaultStorageEngine;\n\n      //Cached engine service instances\n      var engineServices = {};\n\n      /**\n       * Get storage engine service name\n       */\n      function getEngineServiceName(engine) {\n        return '$' + engine + 'Storage';\n      }\n\n      /**\n       * Get storage engine service instance\n       */\n      function getEngineService(engine) {\n\n        //Cached?\n        if (engineServices[engine]) {\n          return engineServices[engine];\n        }\n\n        //Get the engine service\n        var serviceName = getEngineServiceName(engine);\n        var engineService = $injector.get(serviceName);\n\n        //Not supported\n        if (engine !== 'memory' && !engineService.isSupported()) {\n\n          //Determine fallback\n          var fallback = void 0;\n          if (angular.isFunction(engineService.getFallbackEngine)) {\n            fallback = engineService.getFallbackEngine();\n          }\n\n          //Validate fallback and log warning\n          fallback = fallback || 'memory';\n          $log.warn('Storage engine', engine, 'not supported in this browser.', 'Using fallback engine', fallback, 'instead.');\n\n          //Get fallback engine\n          engineService = getEngineService(fallback);\n        }\n\n        //Cache and return the service\n        return engineServices[engine] = engineService;\n      }\n\n      /**\n       * Get prefixed key\n       */\n      function getPrefixedKey(key) {\n        return key ? storagePrefix + key : '';\n      }\n\n      /**\n       * Test if string only contains numbers\n       */\n      function isStringNumber(string) {\n        return (/^-?\\d+\\.?\\d*$/.test(string.replace(/[\"']/g, ''))\n        );\n      }\n\n      /**\n       * Test if string is a boolean\n       */\n      function isStringBoolean(string) {\n        return string === 'false' || string === 'true';\n      }\n\n      /**\n       * Test if a string is an object/array\n       */\n      function isStringObject(string) {\n        return string.charAt(0) === '{' || string.charAt(0) === '[';\n      }\n\n      /**\n       * Helper to parse a value for storage\n       */\n      function parseValue(value) {\n\n        //Normalize undefined values\n        if (angular.isUndefined(value) || value === null) {\n          return null;\n        }\n\n        //Convert to JSON if not a string\n        if (angular.isObject(value) || angular.isArray(value) || typeof value === 'boolean' || angular.isNumber(Number(value) || value)) {\n          return angular.toJson(value);\n        }\n\n        //Use as is\n        return value;\n      }\n\n      /**\n       * Helper to format a value from storage\n       */\n      function formatValue(value) {\n\n        //Null values (also convert string null value)\n        if (!value || value === null || value === 'null') {\n          return null;\n        }\n\n        //Parse from JSON if needed\n        if (isStringObject(value) || isStringBoolean(value) || isStringNumber(value)) {\n          try {\n            return angular.fromJson(value);\n          } catch (e) {\n            return null;\n          }\n        }\n\n        //Return as is\n        return value;\n      }\n\n      /*****************************************************************************\n       * Initialization\n       ***/\n\n      //Make sure the default storage engine is enabled\n      if (enabledStorageEngines.indexOf(defaultStorageEngine) === -1) {\n        throw new Error('Default storage engine', defaultStorageEngine, 'is not enabled.');\n      }\n\n      //Validate enabled storage engines\n      angular.forEach(enabledStorageEngines, function (engine) {\n        var serviceName = getEngineServiceName(engine);\n        if (!$injector.has(serviceName)) {\n          throw new Error('Storage engine', engine, 'does not exist.', 'Make sure the service', serviceName, 'is included as a dependency.');\n        }\n      });\n\n      /*****************************************************************************\n       * Storage engine instances class\n       ***/\n\n      /**\n       * Storage engine instance constructor\n       */\n      var StorageEngine = function StorageEngine(engine) {\n        this.engine = getEngineService(engine);\n      };\n\n      /**\n       * Setter\n       */\n      StorageEngine.prototype.set = function (key, value) {\n\n        //Must have a key\n        key = getPrefixedKey(key);\n        if (!key) {\n          return false;\n        }\n\n        //Parse value\n        value = parseValue(value);\n\n        //Store value\n        try {\n          this.engine.set(key, value);\n          return true;\n        } catch (e) {\n          return false;\n        }\n      };\n\n      /**\n       * Getter\n       */\n      StorageEngine.prototype.get = function (key, defaultValue) {\n\n        //Default value of default value is set to null (defaultvalueception!)\n        if (typeof defaultValue === 'undefined') {\n          defaultValue = null;\n        }\n\n        //Must have a key\n        key = getPrefixedKey(key);\n        if (!key) {\n          return defaultValue;\n        }\n\n        //Get value and return formatted\n        try {\n          var value = this.engine.get(key);\n          if (value === null) {\n            return defaultValue;\n          }\n          return formatValue(value);\n        } catch (e) {\n          return defaultValue;\n        }\n      };\n\n      /**\n       * Remover\n       */\n      StorageEngine.prototype.remove = function (key) {\n\n        //Must have a key\n        key = getPrefixedKey(key);\n        if (!key) {\n          return false;\n        }\n\n        //Remove\n        try {\n          this.engine.remove(key);\n          return true;\n        } catch (e) {\n          return false;\n        }\n      };\n\n      /**\n       * Clear, optionally prefixed\n       */\n      StorageEngine.prototype.clear = function (prefix) {\n        prefix = storagePrefix + (prefix || '');\n        this.engine.clear(prefix);\n      };\n\n      /*****************************************************************************\n       * Exposed storage service\n       ***/\n\n      //Create default storage engine service and initialize engines cache\n      var Storage = new StorageEngine(defaultStorageEngine);\n      var StorageEngines = {};\n\n      //Store ourselves in the cache as the default storage engine\n      StorageEngines[defaultStorageEngine] = Storage;\n\n      //Create dynamic properties for all enabled storage engines\n      angular.forEach(enabledStorageEngines, function (engine) {\n        Object.defineProperty(Storage, engine, {\n\n          /*jshint -W083 */\n          get: function get() {\n            if (StorageEngines[engine]) {\n              return StorageEngines[engine];\n            }\n            return StorageEngines[engine] = new StorageEngine(engine);\n          }\n        });\n      });\n\n      //Return\n      return Storage;\n    }];\n  });\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Storage.CookieStorage.Service', [])\n\n  /**\n   * Cookie storage engine service\n   */\n  .factory('$cookieStorage', ['$injector', '$log', function $cookieStorage($injector, $log) {\n\n    //Get cookies service\n    var $cookies = void 0;\n    if ($injector.has('$cookies')) {\n      $cookies = $injector.get('$cookies');\n    } else {\n      $log.warn('Cookie storage requires the `ngCookies` module as a dependency');\n    }\n\n    /**\n     * Storage engine interface\n     */\n    return {\n\n      /**\n       * Check if supported\n       */\n      isSupported: function isSupported() {\n        return !!$cookies;\n      },\n\n      /**\n       * Get fallback engine\n       */\n      getFallbackEngine: function getFallbackEngine() {\n        return 'memory';\n      },\n\n      /**\n       * Set an item\n       */\n      set: function set(key, value) {\n        $cookies.put(key, value);\n      },\n\n      /**\n       * Get an item\n       */\n      get: function get(key) {\n        return $cookies.get(key);\n      },\n\n      /**\n       * Remove an item\n       */\n      remove: function remove(key) {\n        $cookies.remove(key);\n      },\n\n      /**\n       * Clear items\n       */\n      clear: function clear(prefix) {\n\n        //Get all the cookies and corresponding keys\n        var prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n        var cookies = $cookies.getAll();\n        var keys = cookies ? Object.keys(cookies) : [];\n\n        //Loop keys\n        for (var k = 0; k < keys.length; k++) {\n          if (!prefix || prefixRegex.test(keys[k])) {\n            $cookies.remove(keys[k]);\n          }\n        }\n      }\n    };\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Storage.LocalStorage.Service', [])\n\n  /**\n   * Local storage engine service\n   */\n  .factory('$localStorage', ['$window', function $localStorage($window) {\n\n    /**\n     * Storage engine interface\n     */\n    return {\n\n      /**\n       * Check if supported\n       */\n      isSupported: function isSupported() {\n\n        //Prepare test key\n        var key = '___' + Math.round(Math.random() * 1e7);\n\n        //Try local storage\n        try {\n          $window.localStorage.setItem(key, '');\n          $window.localStorage.removeItem(key);\n          return true;\n        } catch (e) {\n          return false;\n        }\n      },\n\n      /**\n       * Get fallback engine\n       */\n      getFallbackEngine: function getFallbackEngine() {\n        return 'cookie';\n      },\n\n      /**\n       * Set an item\n       */\n      set: function set(key, value) {\n        $window.localStorage.setItem(key, value);\n      },\n\n      /**\n       * Get an item\n       */\n      get: function get(key) {\n        return $window.localStorage.getItem(key);\n      },\n\n      /**\n       * Remove an item\n       */\n      remove: function remove(key) {\n        $window.localStorage.removeItem(key);\n      },\n\n      /**\n       * Clear items\n       */\n      clear: function clear(prefix) {\n\n        //Get regex for prefix and keys\n        var prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n        var keys = Object.keys($window.localStorage);\n\n        //Loop keys\n        for (var k = 0; k < keys.length; k++) {\n          if (!prefix || prefixRegex.test(keys[k])) {\n            $window.localStorage.removeItem(keys[k]);\n          }\n        }\n      }\n    };\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Storage.MemoryStorage.Service', [])\n\n  /**\n   * Memory storage engine service\n   */\n  .factory('$memoryStorage', function $memoryStorage() {\n\n    /**\n     * Store\n     */\n    var memoryStore = {};\n\n    /**\n     * Storage engine interface\n     */\n    return {\n\n      /**\n       * Always supported\n       */\n      isSupported: function isSupported() {\n        return true;\n      },\n\n      /**\n       * Get fallback engine\n       */\n      getFallbackEngine: function getFallbackEngine() {\n        return '';\n      },\n\n      /**\n       * Set an item\n       */\n      set: function set(key, value) {\n        memoryStore[key] = value;\n      },\n\n      /**\n       * Get an item\n       */\n      get: function get(key) {\n        if (typeof memoryStore[key] === 'undefined') {\n          return null;\n        }\n        return memoryStore[key];\n      },\n\n      /**\n       * Remove an item\n       */\n      remove: function remove(key) {\n        if (typeof memoryStore[key] !== 'undefined') {\n          delete memoryStore[key];\n        }\n      },\n\n      /**\n       * Clear items\n       */\n      clear: function clear(prefix) {\n\n        //Get regex for prefix and keys\n        var prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n        var keys = Object.keys(memoryStore);\n\n        //Loop keys\n        for (var k = 0; k < keys.length; k++) {\n          if (!prefix || prefixRegex.test(keys[k])) {\n            delete memoryStore[keys[k]];\n          }\n        }\n      }\n    };\n  });\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Storage.SessionStorage.Service', [])\n\n  /**\n   * Session storage engine service\n   */\n  .factory('$sessionStorage', ['$window', function $sessionStorage($window) {\n\n    /**\n     * Storage engine interface\n     */\n    return {\n\n      /**\n       * Check if supported\n       */\n      isSupported: function isSupported() {\n\n        //Prepare test key\n        var key = '___' + Math.round(Math.random() * 1e7);\n\n        //Try session storage\n        try {\n          $window.sessionStorage.setItem(key, '');\n          $window.sessionStorage.removeItem(key);\n          return true;\n        } catch (e) {\n          return false;\n        }\n      },\n\n      /**\n       * Get fallback engine\n       */\n      getFallbackEngine: function getFallbackEngine() {\n        return 'memory';\n      },\n\n      /**\n       * Set an item\n       */\n      set: function set(key, value) {\n        $window.sessionStorage.setItem(key, value);\n      },\n\n      /**\n       * Get an item\n       */\n      get: function get(key) {\n        return $window.sessionStorage.getItem(key);\n      },\n\n      /**\n       * Remove an item\n       */\n      remove: function remove(key) {\n        $window.sessionStorage.removeItem(key);\n      },\n\n      /**\n       * Clear items\n       */\n      clear: function clear(prefix) {\n\n        //Get regex for prefix and keys\n        var prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n        var keys = Object.keys($window.sessionStorage);\n\n        //Loop keys\n        for (var k = 0; k < keys.length; k++) {\n          if (!prefix || prefixRegex.test(keys[k])) {\n            $window.sessionStorage.removeItem(keys[k]);\n          }\n        }\n      }\n    };\n  }]);\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.Service', [\n  'Storage.MemoryStorage.Service',\n  'Storage.CookieStorage.Service',\n  'Storage.SessionStorage.Service',\n  'Storage.LocalStorage.Service',\n])\n\n/**\n * Provider definition\n */\n.provider('$storage', function $storageProvider() {\n\n  /**\n   * Global prefix\n   */\n  this.prefix = '';\n\n  /**\n   * Enabled storage engines\n   */\n  this.enabledStorageEngines = ['local', 'session', 'cookie', 'memory'];\n\n  /**\n   * Default storage engine\n   */\n  this.defaultStorageEngine = 'local';\n\n  /**\n   * Set prefix\n   */\n  this.setPrefix = function(prefix) {\n\n    //Append dot if there isn't one\n    if (prefix && prefix.substr(-1) !== '.') {\n      prefix += '.';\n    }\n\n    //Set prefix\n    this.prefix = prefix;\n    return this;\n  };\n\n  /**\n   * Set enabled storage engines\n   */\n  this.setEnabledStorageEngines = function(enabledStorageEngines) {\n    if (angular.isArray(enabledStorageEngines)) {\n      this.enabledStorageEngines = enabledStorageEngines;\n    }\n    return this;\n  };\n\n  /**\n   * Set default storage engine\n   */\n  this.setDefaultStorageEngine = function(defaultStorageEngine) {\n    this.defaultStorageEngine = defaultStorageEngine;\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = function($parse, $injector, $log) {\n\n    //Set configuration vars locally\n    let storagePrefix = this.prefix;\n    let enabledStorageEngines = this.enabledStorageEngines;\n    let defaultStorageEngine = this.defaultStorageEngine;\n\n    //Cached engine service instances\n    let engineServices = {};\n\n    /**\n     * Get storage engine service name\n     */\n    function getEngineServiceName(engine) {\n      return '$' + engine + 'Storage';\n    }\n\n    /**\n     * Get storage engine service instance\n     */\n    function getEngineService(engine) {\n\n      //Cached?\n      if (engineServices[engine]) {\n        return engineServices[engine];\n      }\n\n      //Get the engine service\n      let serviceName = getEngineServiceName(engine);\n      let engineService = $injector.get(serviceName);\n\n      //Not supported\n      if (engine !== 'memory' && !engineService.isSupported()) {\n\n        //Determine fallback\n        let fallback;\n        if (angular.isFunction(engineService.getFallbackEngine)) {\n          fallback = engineService.getFallbackEngine();\n        }\n\n        //Validate fallback and log warning\n        fallback = fallback || 'memory';\n        $log.warn(\n          'Storage engine', engine, 'not supported in this browser.',\n          'Using fallback engine', fallback, 'instead.'\n        );\n\n        //Get fallback engine\n        engineService = getEngineService(fallback);\n      }\n\n      //Cache and return the service\n      return (engineServices[engine] = engineService);\n    }\n\n    /**\n     * Get prefixed key\n     */\n    function getPrefixedKey(key) {\n      return key ? (storagePrefix + key) : '';\n    }\n\n    /**\n     * Test if string only contains numbers\n     */\n    function isStringNumber(string) {\n      return /^-?\\d+\\.?\\d*$/.test(string.replace(/[\"']/g, ''));\n    }\n\n    /**\n     * Test if string is a boolean\n     */\n    function isStringBoolean(string) {\n      return (string === 'false' || string === 'true');\n    }\n\n    /**\n     * Test if a string is an object/array\n     */\n    function isStringObject(string) {\n      return (string.charAt(0) === '{' || string.charAt(0) === '[');\n    }\n\n    /**\n     * Helper to parse a value for storage\n     */\n    function parseValue(value) {\n\n      //Normalize undefined values\n      if (angular.isUndefined(value) || value === null) {\n        return null;\n      }\n\n      //Convert to JSON if not a string\n      if (\n        angular.isObject(value) ||\n        angular.isArray(value) ||\n        typeof value === 'boolean' ||\n        angular.isNumber(Number(value) || value)\n      ) {\n        return angular.toJson(value);\n      }\n\n      //Use as is\n      return value;\n    }\n\n    /**\n     * Helper to format a value from storage\n     */\n    function formatValue(value) {\n\n      //Null values (also convert string null value)\n      if (!value || value === null || value === 'null') {\n        return null;\n      }\n\n      //Parse from JSON if needed\n      if (\n        isStringObject(value) ||\n        isStringBoolean(value) ||\n        isStringNumber(value)\n      ) {\n        try {\n          return angular.fromJson(value);\n        }\n        catch (e) {\n          return null;\n        }\n      }\n\n      //Return as is\n      return value;\n    }\n\n    /*****************************************************************************\n     * Initialization\n     ***/\n\n    //Make sure the default storage engine is enabled\n    if (enabledStorageEngines.indexOf(defaultStorageEngine) === -1) {\n      throw new Error(\n        'Default storage engine', defaultStorageEngine, 'is not enabled.'\n      );\n    }\n\n    //Validate enabled storage engines\n    angular.forEach(enabledStorageEngines, function(engine) {\n      let serviceName = getEngineServiceName(engine);\n      if (!$injector.has(serviceName)) {\n        throw new Error(\n          'Storage engine', engine, 'does not exist.',\n          'Make sure the service', serviceName, 'is included as a dependency.'\n        );\n      }\n    });\n\n    /*****************************************************************************\n     * Storage engine instances class\n     ***/\n\n    /**\n     * Storage engine instance constructor\n     */\n    let StorageEngine = function(engine) {\n      this.engine = getEngineService(engine);\n    };\n\n    /**\n     * Setter\n     */\n    StorageEngine.prototype.set = function(key, value) {\n\n      //Must have a key\n      key = getPrefixedKey(key);\n      if (!key) {\n        return false;\n      }\n\n      //Parse value\n      value = parseValue(value);\n\n      //Store value\n      try {\n        this.engine.set(key, value);\n        return true;\n      }\n      catch (e) {\n        return false;\n      }\n    };\n\n    /**\n     * Getter\n     */\n    StorageEngine.prototype.get = function(key, defaultValue) {\n\n      //Default value of default value is set to null (defaultvalueception!)\n      if (typeof defaultValue === 'undefined') {\n        defaultValue = null;\n      }\n\n      //Must have a key\n      key = getPrefixedKey(key);\n      if (!key) {\n        return defaultValue;\n      }\n\n      //Get value and return formatted\n      try {\n        let value = this.engine.get(key);\n        if (value === null) {\n          return defaultValue;\n        }\n        return formatValue(value);\n      }\n      catch (e) {\n        return defaultValue;\n      }\n    };\n\n    /**\n     * Remover\n     */\n    StorageEngine.prototype.remove = function(key) {\n\n      //Must have a key\n      key = getPrefixedKey(key);\n      if (!key) {\n        return false;\n      }\n\n      //Remove\n      try {\n        this.engine.remove(key);\n        return true;\n      }\n      catch (e) {\n        return false;\n      }\n    };\n\n    /**\n     * Clear, optionally prefixed\n     */\n    StorageEngine.prototype.clear = function(prefix) {\n      prefix = storagePrefix + (prefix || '');\n      this.engine.clear(prefix);\n    };\n\n    /*****************************************************************************\n     * Exposed storage service\n     ***/\n\n    //Create default storage engine service and initialize engines cache\n    let Storage = new StorageEngine(defaultStorageEngine);\n    let StorageEngines = {};\n\n    //Store ourselves in the cache as the default storage engine\n    StorageEngines[defaultStorageEngine] = Storage;\n\n    //Create dynamic properties for all enabled storage engines\n    angular.forEach(enabledStorageEngines, function(engine) {\n      Object.defineProperty(Storage, engine, {\n\n        /*jshint -W083 */\n        get: function() {\n          if (StorageEngines[engine]) {\n            return StorageEngines[engine];\n          }\n          return (StorageEngines[engine] = new StorageEngine(engine));\n        },\n      });\n    });\n\n    //Return\n    return Storage;\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.CookieStorage.Service', [])\n\n/**\n * Cookie storage engine service\n */\n.factory('$cookieStorage', function $cookieStorage($injector, $log) {\n\n  //Get cookies service\n  let $cookies;\n  if ($injector.has('$cookies')) {\n    $cookies = $injector.get('$cookies');\n  }\n  else {\n    $log.warn('Cookie storage requires the `ngCookies` module as a dependency');\n  }\n\n  /**\n   * Storage engine interface\n   */\n  return {\n\n    /**\n     * Check if supported\n     */\n    isSupported: function() {\n      return !!$cookies;\n    },\n\n    /**\n     * Get fallback engine\n     */\n    getFallbackEngine: function() {\n      return 'memory';\n    },\n\n    /**\n     * Set an item\n     */\n    set: function(key, value) {\n      $cookies.put(key, value);\n    },\n\n    /**\n     * Get an item\n     */\n    get: function(key) {\n      return $cookies.get(key);\n    },\n\n    /**\n     * Remove an item\n     */\n    remove: function(key) {\n      $cookies.remove(key);\n    },\n\n    /**\n     * Clear items\n     */\n    clear: function(prefix) {\n\n      //Get all the cookies and corresponding keys\n      let prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n      let cookies = $cookies.getAll();\n      let keys = cookies ? Object.keys(cookies) : [];\n\n      //Loop keys\n      for (let k = 0; k < keys.length; k++) {\n        if (!prefix || prefixRegex.test(keys[k])) {\n          $cookies.remove(keys[k]);\n        }\n      }\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.LocalStorage.Service', [])\n\n/**\n * Local storage engine service\n */\n.factory('$localStorage', function $localStorage($window) {\n\n  /**\n   * Storage engine interface\n   */\n  return {\n\n    /**\n     * Check if supported\n     */\n    isSupported: function() {\n\n      //Prepare test key\n      let key = '___' + Math.round(Math.random() * 1e7);\n\n      //Try local storage\n      try {\n        $window.localStorage.setItem(key, '');\n        $window.localStorage.removeItem(key);\n        return true;\n      }\n      catch (e) {\n        return false;\n      }\n    },\n\n    /**\n     * Get fallback engine\n     */\n    getFallbackEngine: function() {\n      return 'cookie';\n    },\n\n    /**\n     * Set an item\n     */\n    set: function(key, value) {\n      $window.localStorage.setItem(key, value);\n    },\n\n    /**\n     * Get an item\n     */\n    get: function(key) {\n      return $window.localStorage.getItem(key);\n    },\n\n    /**\n     * Remove an item\n     */\n    remove: function(key) {\n      $window.localStorage.removeItem(key);\n    },\n\n    /**\n     * Clear items\n     */\n    clear: function(prefix) {\n\n      //Get regex for prefix and keys\n      let prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n      let keys = Object.keys($window.localStorage);\n\n      //Loop keys\n      for (let k = 0; k < keys.length; k++) {\n        if (!prefix || prefixRegex.test(keys[k])) {\n          $window.localStorage.removeItem(keys[k]);\n        }\n      }\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.MemoryStorage.Service', [])\n\n/**\n * Memory storage engine service\n */\n.factory('$memoryStorage', function $memoryStorage() {\n\n  /**\n   * Store\n   */\n  let memoryStore = {};\n\n  /**\n   * Storage engine interface\n   */\n  return {\n\n    /**\n     * Always supported\n     */\n    isSupported: function() {\n      return true;\n    },\n\n    /**\n     * Get fallback engine\n     */\n    getFallbackEngine: function() {\n      return '';\n    },\n\n    /**\n     * Set an item\n     */\n    set: function(key, value) {\n      memoryStore[key] = value;\n    },\n\n    /**\n     * Get an item\n     */\n    get: function(key) {\n      if (typeof memoryStore[key] === 'undefined') {\n        return null;\n      }\n      return memoryStore[key];\n    },\n\n    /**\n     * Remove an item\n     */\n    remove: function(key) {\n      if (typeof memoryStore[key] !== 'undefined') {\n        delete memoryStore[key];\n      }\n    },\n\n    /**\n     * Clear items\n     */\n    clear: function(prefix) {\n\n      //Get regex for prefix and keys\n      let prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n      let keys = Object.keys(memoryStore);\n\n      //Loop keys\n      for (let k = 0; k < keys.length; k++) {\n        if (!prefix || prefixRegex.test(keys[k])) {\n          delete memoryStore[keys[k]];\n        }\n      }\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Storage.SessionStorage.Service', [])\n\n/**\n * Session storage engine service\n */\n.factory('$sessionStorage', function $sessionStorage($window) {\n\n  /**\n   * Storage engine interface\n   */\n  return {\n\n    /**\n     * Check if supported\n     */\n    isSupported: function() {\n\n      //Prepare test key\n      let key = '___' + Math.round(Math.random() * 1e7);\n\n      //Try session storage\n      try {\n        $window.sessionStorage.setItem(key, '');\n        $window.sessionStorage.removeItem(key);\n        return true;\n      }\n      catch (e) {\n        return false;\n      }\n    },\n\n    /**\n     * Get fallback engine\n     */\n    getFallbackEngine: function() {\n      return 'memory';\n    },\n\n    /**\n     * Set an item\n     */\n    set: function(key, value) {\n      $window.sessionStorage.setItem(key, value);\n    },\n\n    /**\n     * Get an item\n     */\n    get: function(key) {\n      return $window.sessionStorage.getItem(key);\n    },\n\n    /**\n     * Remove an item\n     */\n    remove: function(key) {\n      $window.sessionStorage.removeItem(key);\n    },\n\n    /**\n     * Clear items\n     */\n    clear: function(prefix) {\n\n      //Get regex for prefix and keys\n      let prefixRegex = prefix ? new RegExp('^' + prefix) : null;\n      let keys = Object.keys($window.sessionStorage);\n\n      //Loop keys\n      for (let k = 0; k < keys.length; k++) {\n        if (!prefix || prefixRegex.test(keys[k])) {\n          $window.sessionStorage.removeItem(keys[k]);\n        }\n      }\n    },\n  };\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}